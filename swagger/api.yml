openapi: 3.0.0
info:
  title: 조은사이 API
  description: >
    환영합니다! [조은사이](https://example.com)는 팀프로젝트를 할 때 사용하는 도구를 하나로 모아둔 플랫폼입니다. 이 API 문서는 조은사이의 API를 사용하는 방법을 설명합니다.
    
    #### 지원 및 문의
    - API 사용 중에 문제가 발생하거나 추가적인 지원이 필요한 경우, 지원 페이지에서 도움을 받을 수 있습니다.
    - 새로운 기능 제안이나 버그 리포트는 리포지토리를 통해 제출해 주세요.
    
    #### API 작성에 참고한 문서:
    - [Google API design guide](https://cloud.google.com/apis/design)

  contact:
    email: wnddms12345@gmail.com
  version: 0.0.1

externalDocs:
  description: Find out more about JoEunSaE
  url: http://example.com

servers:
  - url: 'http://localhost:8080'

tags:
  - name: Auth
    description: 로그인 및 인증 관련 API
  - name: User
    description: 사용자 정보 관련 API
  - name: Workspace
    description: 워크스페이스 관련 API
  - name: Chat
    description: 채팅 관련 API(WebSocket)


paths:
  /login/oauth2/kakao:
    post:
      tags:
        - Auth
      summary: 카카오 로그인 인증
      description: >
        초대받은 경우만 있는 토큰으로 카카오를 통한 로그인 인증을 처리합니다. 초대 토큰이 없는 경우에는 `inviteToken` 없이 요청합니다.
      parameters:
        - in: query
          name: code
          schema:
            type: string
          required: true
          description: 네이버에서 받아온 AuthorizationCode를 보내주시면 됩니다.
          example: "네이버에서 받아온 코드"
        - in: query
          name: inviteCode
          required: false
          schema:
            type: string
          description: 초대된 경우에만 있는 코드
          example: "초대 코드"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: 'Bad Request'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden'
  /login/oauth2/naver:
    post:
      tags:
        - Auth
      summary: 네이버 로그인 인증
      description: >
        카카오 로그인 인증과 유사하게 처리합니다. 초대받은 경우만 있는 토큰으로 네이버를 통한 로그인 인증을 처리합니다. 초대 토큰이 없는 경우에는 `inviteToken` 없이 요청합니다.
      parameters:
        - in: query
          name: code
          schema:
            type: string
          required: true
          description: 네이버에서 받아온 AuthorizationCode를 보내주시면 됩니다.
          example: "네이버에서 받아온 코드"
        - in: query
          name: inviteToken
          required: false
          schema:
            type: string
          description: 초대된 경우에만 있는 토큰
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: 'Bad Request'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden'
  /login/oauth2/refresh:
    post:
      tags:
        - Auth
      summary: AccessToken 갱신
      description: >
        Refresh Token을 통해 AccessToken을 갱신합니다.
      parameters:
        - in: query
          name: refreshToken
          schema:
            type: string
          required: true
          description: Refresh Token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
      responses:
        '200':
          description: AccessToken 갱신 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: 'Bad Request'
        '401':
          description: 'Unauthorized 리프레시 토큰이 만료된 상황 재로그인 필요'
        '403':
          description: 'Forbidden'
  /user/info:
    get:
      tags:
        - User
      summary: 사용자 정보 조회
      description: >
        현재 로그인한 사용자의 정보를 조회합니다.
      responses:
        '200':
          description: 사용자 정보 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden'

  /workspace/member:
    get:
      tags:
        - Workspace
      summary: 워크스페이스 멤버 조회
      description: >
        현재 로그인한 사용자가 속한 워크스페이스의 멤버 목록을 조회합니다.
      responses:
        '200':
          description: 워크스페이스 멤버 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserInfo'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden'

  /workspace/info:
    get:
      tags:
        - Workspace
      summary: 워크스페이스 정보 조회
      description: >
        현재 로그인한 사용자가 속한 워크스페이스의 정보를 조회합니다.
      responses:
        '200':
          description: 워크스페이스 정보 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceInfo'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden'

  /workspace/join:
    post:
      tags:
        - Workspace
      summary: 워크스페이스 가입
      description: >
        초대 코드를 통해 워크스페이스에 가입합니다.
      parameters:
        - in: query
          name: inviteCode
          schema:
            type: string
            required: true
            example: '1234567890'
      responses:
        '200':
          description: 워크스페이스 가입 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceInfo'
        '400':
          description: 'Bad Request'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden'

  /workspace/invited:
    post:
      tags:
        - Workspace
      summary: 워크스페이스 초대 되었음을 알림.
      description: >
        사용자가 초대되었음을 알립니다.
      parameters:
        - in: query
          name: inviteCode
          schema:
            type: string
            required: true
            example: '1234567890'
      responses:
        '200':
          description: 워크스페이스 초대 알림 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceInfo'
        '400':
          description: 'Bad Request'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden'
  /workspace/school:
    get:
      tags:
        - Workspace
      summary: 학교 정보 조회
      description: >
        전국 대학교 정보를 조회합니다.
      parameters:
        - in: query
          name: name
          schema:
            type: string
          required: true
          description: 학교 이름
          example: "서울대"
      responses:
        '200':
          description: 학교 정보 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 1
                  schools:
                    type: array
                    items:
                      type: string
                      example: '서울대학교'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden'

  /workspace/create:
    post:
      tags:
        - Workspace
      summary: 워크스페이스 생성
      description: >
        워크스페이스를 생성합니다.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                workspaceName:
                  type: string
                  example: '조은사이'
                schoolName:
                  type: string
                  example: '서울대학교'
      responses:
        '200':
          description: 워크스페이스 생성 성공
        '400':
          description: 'Bad Request'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden'
  
  /ws-chat:
    get:
      tags:
        - Chat
      summary: 채팅을 위한 WebSocket 연결
      description: >
        채팅 기능을 위한 WebSocket 연결 엔드포인트입니다. 클라이언트는 SockJS와 Stomp를 사용하여 이 엔드포인트에 연결할 수 있습니다.
      responses:
        '101':
          description: Switching Protocols

  /ws-chat/topic/message:
    get:
      tags:
        - Chat
      summary: 새 메시지 구독
      description: >
        `/topic/message`를 구독하여 새로운 메시지를 수신합니다. 실제 구독은 WebSocket 연결 후 STOMP를 통해 이루어집니다.
      responses:
        '200':
          description: 메시지 수신 dto
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageDto'

  /ws-chat/topic/history:
    get:
      tags:
        - Chat
      summary: 메시지 히스토리 구독
      description: >
        `/topic/history`를 구독하여 이전 메시지 히스토리를 수신합니다. 실제 구독은 WebSocket 연결 후 STOMP를 통해 이루어집니다.
        메시지는 10개 단위로 옵니다(임시)
      responses:
        '200':
          description: 메시지 히스토리 수신 dto
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoryResponseDto'

  /ws-chat/app/message:
    post:
      tags:
        - Chat
      summary: 메시지 발송
      description: >
        새 메시지를 `/app/message` 경로로 발송합니다. 실제 발송은 WebSocket 연결 후 STOMP를 통해 이루어집니다.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagePublishDto'
      responses:
        '200':
          description: 메시지 발송 성공
  /ws-chat/app/history:
    post:
      tags:
        - Chat
      summary: 메시지 히스토리 요청
      description: >
        특정 방의 이전 메시지 히스토리를 요청합니다. 실제 요청은 WebSocket 연결 후 STOMP를 통해 이루어집니다.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HistoryPublishDto'
      responses:
        '200':
          description: 메시지 히스토리 요청 성공



components:
  schemas:
    LoginResponse:
      type: object
      properties:
        spaceState:
          type: string
          enum: [ hasWorkSpace, noSpace, invited, overflow ]
          description: 워크스페이스의 상태
          example: hasWorkSpace
        workspaceName:
          type: string
          description: 워크스페이스의 이름 만약 워크스페이스가 없는 경우에는 null
          example: '조은사이'
        workspaceId:
          type: string
          format: uuid
          description: 워크스페이스의 고유 식별자 만약 워크스페이스가 없는 경우에는 null
          example: '1234567890'
        accessToken:
          type: string
          description: 인증을 위한 Access 토큰
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
        refreshToken:
          type: string
          description: Access Token 갱신을 위한 Refresh 토큰
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
    UserInfo:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          example: '1234567890'
        userName:
          type: string
          example: '신중은'
        userImage:
          type: string
          format: uri
          example: 'https://lh3.googleusercontent.com/ogw/AF2bZyhqowurXq6imx61oPHn5G_c6OIEnucOyJanitxYGFUI498=s32-c-mo'
        email:
          type: string
          example: 'wnddms12345@gmail.com'
    WorkspaceInfo:
      type: object
      properties:
        spaceState:
          type: string
          enum: [ hasWorkSpace, noSpace, invited, overflow ]
          example: hasWorkSpace
        workspaceId:
          type: string
          format: uuid
          example: '1234567890'
        workspaceName:
          type: string
          example: '조은사이'
    #        members:
    #          type: array
    #          items:
    #            $ref: '#/components/schemas/UserInfo'

    SenderDto:
      type: object
      properties:
        senderName:
          type: string
          example: '신중은'
        senderImage:
          type: string
          format: uri
          example: 'https://example.com/image.jpg'
        senderId:
          type: string
          format: uuid
          example: '1234567890'
    MessagePublishDto:
      type: object
      properties:
        roomId:
          type: string
          example: '1234567890'
        senderId:
          type: string
          example: '1234567890'
        content:
          type: string
          example: '안녕하세요!'
    
    MessageDto:
      type: object
      properties:
        sender:
          $ref: '#/components/schemas/SenderDto'
        date:
          type: string
          format: date-time
          example: '2023-12-31T23:59:59'
        messageId:
          type: string
          example: '1234567890'
        content:
          type: string
          example: '안녕하세요!'

    HistoryPublishDto:
      type: object
      properties:
        lastMsgId:
          type: string
          example: '1234567890'
          required: false
        senderId:
          type: string
          example: '1234567890'
        roomId:
          type: string
          example: '1234567890'
    HistoryResponseDto:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/MessageDto'
        isEnd:
          type: boolean
          example: false
        lastMsgId:
          type: string
          example: '1234567890'